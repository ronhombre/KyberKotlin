/*
 * Copyright 2024 Ron Lauren Hombre
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *        and included as LICENSE.txt in this Project.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package asia.hombre.kyber

import asia.hombre.kyber.internal.KyberAgreement
import asia.hombre.kyber.internal.KyberMath
import asia.hombre.kyber.internal.KyberMath.int
import org.kotlincrypto.random.CryptoRand
import kotlin.math.abs
import kotlin.random.Random
import kotlin.test.*

@OptIn(ExperimentalStdlibApi::class)
class Tests {
    @Test
    fun playground() {

    }

    @Test
    fun katTest512() {
        //Random Seed and PKESeed based from CCTV https://github.com/C2SP/CCTV/
        val randomSeed = KyberMath.decodeHex("c6f5785a6f2b42e843228be53eb768d64c6f9d4355ae95f083e51ed57c437310")
        val pkeSeed = KyberMath.decodeHex("e1e3206875e67d7e81353774fe9025035b9b41a4a9f6ec00b91c600442fd717d")

        val key = KyberKeyGenerator.generate(KyberParameter.ML_KEM_512, randomSeed, pkeSeed)

        val knownEncapsulationKey
        val knownDecapsulationKey = "2D17C4BA262EDEC00F00F2247692B87BC2564FFC7910F113FB8C7D8B1C3981AC95D8A8488781BEDAB191E69170151C2CE942191276691EEB395CC29AFDE6091591CCEF038AE9235A201510EEF014554626010C9574E7CCFA5657D0999445664045FB20A22A5B3168268B12ABFB9933E2486E45B84B8D3973785C8E158915FB499493E0195CF70443BCC4517B7CC323B0051BA31AE44BDB415E63C66FA0F14334F75E376411B91BB7296A18F323B6EF37BEE5C8B84ECBB65F9C00BD504B316A9A6A7C6091D28FE65C3436B5C9C0F89A47104767F7B0F79A8FC2901D49E31611B2B18C52B510AC054E926229F532D2187657244836254C193014FDE766E8D29038E0A388774CB55335439732BB032399C32301052A8F155E3A49A33914581729B11FE0602BBAC54B495C1A96B5FF16152A659617C7B79D8245C7D4ABA65B5D5CCC941E24C09DEA2630D1ACDA6811B21B78AC89B662581CBA46586257C7348022632948CB1CC8A12C8C6712176E6154D5B2CE9E17B20ED770FC959F03F4A2E251845CA128031C5F37631F6E6241FCE131164092BA676483C7050890279672A9F8A2329B752EB9B09EB7E4747E13587EC54B99582E2D905ED2B55EF7AA52A185CAACF037D4946A95C94F0B80423FD4884A8370AF576F0E4B1B6C851583312500B4420676A288019BFD8C2C24116EEC8C5DD5822DA84C446E09C47887B9C912B8C1786F9AD83E1D36961750175398606B42B2C3A095D104BC0AAC455A72554AA9AC1D9AC5A801AB8C6723D53A259BA20C094BBE3094534C88817703A114F94B2070C4901A4BB7D02858B31DBC614AA7C3A10344956B940EB619ADAFD9C29397BD63C0600D910E97A0554515163221194DC2BCECB5786F081F79478AF2F2559056B66453789CE53877DB743A3C8378D20F92B3C42F46A712AA92EB765DE933BD0A53A531F552218C5DA3B57775881BBD8240EABC1881EC3519CA80243A8FC4CCAA7108099A959726B72AEE522780649C91F4A82AAB2045834B2F64039E542C37B7B81F602BE2F0688CB5250F295591C999390499822140FF4325011860FA753B81E85BF29C866C361D910341F296C64B46C2A2E30B1535A5C0602593415D156B43036B21B14BA3A0C72E848C5EE03466CAB97721D83DEFDAB1F6708971D3C4581441CE397FE7BBC7A08ACFDCC417C5F56DFDD4423E306F1F69A86E5B5BA3E031BF92A16702861A51A2FEB974F4844812B8302DC83026EA566A1C110CD2C4AF48BEDD742F1C02CD3FCA0DFB8331F414B115849BCB05A2DF615B49A90EC0A433E8787E185142AA406003D35409EC842AF304459B40FFFA0D84340156B5767EE0CA6E2850EC8CCAED317ECF711E27D59B3C985555E44C935988092981DA95B42573B9BC38122ED44A800510756429F1B0640685B048597842CBB93DC6B2F9144DCF41A624EB90202A30381410F4CBAACCF61E485524EE593AD7D5974F774AE59BA20C7C6EB0009B39962DC0F828E8538EF583B4DC40C09555A3968AB257D407CC4AB801C7521BF7564B163FAB927B4703225B1B497A096B4EB984DFD3512ECB2EAEA46FB53C3B3840AF3C4AAF78B1461E0564290C0A8F93A1E1B1C50CDB5FD56970046103600A1CC109B58CC32E52C7A168E17107A9C77CC448B01A5A7DC90603D708C6D717C3165E772C74763821F35934A613B0297246370020EB113645D75593C5130072ACC0483118067BFB8093B518066318C3F936BD29E8ACBA8318C68A3C47A1BE713C5B5A3C3DF82514A5DB7F70150B44B3927AA5C7B5507F8E693EED04369340141B1C75069B5F3ABB016833B936A1ADF7CCBEDFE775F0494ACB6404307A787E19B2FCBA2AA8B3CF94EA6AA4303CFE4821FC9A62EE5ACBCAA42556D046E4AB2E65E57E4DCC874276C89F980AC1A52FDE549064B7ABEAB30E81D540AF393A51BB917D87098AE238946033F3BB31D82B418EA863B9FC2008613E4751AED8C9AAA41840579116B571AD6DF0CFC1185B17612008900D104A83B67A36ACD8C783C5B1C21026F03B4AB57B23BD160A103920729B13334395A500A2A5A126BD66C75C5C2A046A97EBB8565CBB65FC6A3E1C11A990E20A9C88C96AA3924961159EF22082E45C86A9BB80D7B8936CC9EEC593E5E4523DDC5438C819551328557982CF6784B1720E4ED5AC0ADD457F573A041465BCBD7CA4E1D7D53EAADEDA511962A36EB0A9CE0ECBCFBBBD9A2636E23A0C1C22683943639CD44AF051FF235B8DFBB73A4DC6F5785A6F2B42E843228BE53EB768D64C6F9D4355AE95F083E51ED57C437310"

        assertEquals(knownEncapsulationKey, key.encapsulationKey.fullBytes.toHexString(HexFormat.UpperCase), "Encapsulation key is not correct!")
        assertEquals(knownDecapsulationKey, key.decapsulationKey.fullBytes.toHexString(HexFormat.UpperCase), "Decapsulation key is not correct!")
    }

    @Test
    fun katTest768() {
        //Random Seed and PKESeed based from CCTV https://github.com/C2SP/CCTV/
        val randomSeed = KyberMath.decodeHex("d1d49a515250dbceb9f6e3fcc1c7d5306918964b21ddb22207e03e57f0600da8")
        val pkeSeed = KyberMath.decodeHex("f688563f7c66a5da2d8bdb5a5f3e07bd8dce6f7efcec7f41298d79863459f7cd")

        val key = KyberKeyGenerator.generate(KyberParameter.ML_KEM_768, randomSeed, pkeSeed)

        val knownEncapsulationKey = "D0F1A25721155A28143A355F99C582C2D258A270B9F78941AF004116E94F2F9825AF17C50B600705EA1A9C2440DF6803518A5BA558ACB5B732D06A3C80E555FA374D80D82F08C5B47CA12CBE6520340538C2100B5E094392ACACAFE1CE4AD74FA451C4379219140103E9C3BA7BA683CDDCA0D3B02D57104C292B2E25BC791D8B11D5079477D7B0F930176FB0A5CDA99AFBFB6FCA86226CB8152B250A536CA60B6CCF93880007068B41BBC5C6E9B8BD92AF8A717E37C69AC7DB7E76A2C36EB028C1E098915274B4D59DEF6C42D3C25BB35310846809C96BC43B639E52A3730654CC8DB548FAF21E446CA874A3CABA777BAC25B56902481C79A744D70D12130AD6BC8136349E3234C556267E97B0A8CCF772528299FA26111172C223F2484102917BDB6DE7770682698763E5B2038779F812363A727F40949B76B6913C8910D6F51DD48983BA149C070590582662FBC9053B667E1EEA1CA7173E421576F2D8AD7BF415899484BD1530B4FC855354952CF28D0F1216DFBA00EC100BDD76C4F4B405C913BAA78958AE31C578463877138CF89255A3935CFBD1B77DBB5F66B87543131DA4AABB6781427F417E841141DCB47FCD82A92AEB3C50030D71EB7F3B17B0207A6CDF654D563A420BB742AC30C0E01235910886FF045652D5035B7AB98A1B6ABAC88EA5996B965C2D3F3305E075BBCA267E8547C6C7769FB9F91E20849B524B7822965FE036A515C60E24636A3665B23B878C5B7658F7C49F2059255C89536426510875CBDCA111BDC29183459340C125DF30C05A7698490193D88C52410A14A7F12A118495413487B434568D105F2D7B9C0FC32E80A13E142528CA1825E0830CD41071AAC7124042145BE35E30D541C2BA31A82A5F479B3BAD881164AA347386C9BFA505C9968FDEA866120C8B4E809BDB1482D790A03FCB1CA88C15AAE8047E1678BA66833CA430D592638BF3BE19592027B3CCB044A9A4D01F3804C2FE0CA60CC7C017DC14DFF60562F20D912650FC24449A78998D2B0CE4D9B131955AFFE7B5C12278CB5B23847C8090FC0578F71760918E9EE8274673845CA29F8D338FA89637265C518F902A9BA8AD9615764CE9835B322E0B5BB1FE928888318988E435CC3C3A918CCC773371A9687884F0822558AE634A54D7C74556528F2D7CB212F1901A82AE68905330B4550518B7B44C117F335F9C818635A2A29E59B39784B021D88354D707CFE0B3599B54FA4A1218261DC72A00CF2CCEF8C6C2FE131899F9A239F545C4605296D7B39BEB0832732EB608464DF29D193B2F2C3B7C69CBBC2082CDA14863071235A75544320C1C7930262F82AC7BA788C6C09586C2420D7385A0A6C50D050910E2956844B558FA78B6CB2969E866A0BCC1B7B980A02669C226B6C9267F6E66995D6B37EEDC8E34F516EF48A69A3461F3742CC6268B26A8C158E4BF34C072D4E37A4E273EE3464AEA81B57C52AB4D5A1E94A668C9A14612196F6A792646581A8FF545179323AAA8369C21181C1329464099CDF940FA56CE1F204AD4B048D5E783E1948B3493B273B2A33D8C0183E386786C7E7E421B1536610CECB16B7A98641B95693879A7D8BC444931CEDAA6C45303AAC0A48AC29041085526FFFF11B531B1800F4E1FA75C4D008C4F9A112932C669D543551204405DA8B4"
        val knownDecapsulationKey = "3261790E9484C6453502778DE5FACCECC56D94FBBB3D6A039D03CEB70B254F2A201A9192B5992885EB6C9F44B9BB70C584CC4891782E47CAA4124CAB6DB66F6EACB09AEC6D6CF5324ED22CFC2A3CA366AD3DA0B0B9B0AA1AE7C07C9776C7F2734C28A4A57577378AA2B7FA49E489A8F7A2C80D360E622A3A41180FB1167E56533FF3E3A00365090B8455170896946C7FE95B100CD176BF3C442D6C96E8D4B996A980D671A2406C15A826CAB288359CFA2B5A3580F5BB5584B6C8DCBC5024C7149FBC580F081DA2EB739A1C560A39B1D1B02B15F730FEF1315589455CA13E3409526A5640F3924090586CFD376C21375B77630B7E0AABDC8C811E564C7155158AC14CFF898EE621AF8C05CFCD2CC41BE341215818E6E5A37C167A381BA1C4A65724F64DA94AC06E530D260229BB2C61A1D17630AA3B3F4AA4A1DB7F740BAFBD9ABA41490F19B6127DFB651C2032317123662830C6EAB9ED4B47037C30A5D4048EA69DE1769323A85726766277A82554C00CF3B500F6A9BA070B6E1E010FE667429D5259D027CCAAEC559C760AE99B62C014CF76B08C89A72D3E233AF5251976E288DA3A8FA2820E6CA8CA953AB8F504060FD2C0104558AF67C34691C1C4C2878D5904C94390B1639548E206659804A3759A6A7930921A3FC2853D8E90CD94B523FE1A30704030F04B9D4FC919FD22C27966AA53180916009E3F831A47B53F5951087D110C010CB81A415D88C3CB19031E3F30A21496903F59CE75742227B22CA7687AD3B05C0ACA42E3747BC5FB1683B796A10BAC6A158A745836478829707B70ACA820D3A9B6ADDA8091BC0C44C9BCA1F57BAE60165940AC87815C1E36A783A88B2B68655D22CCEBD1490D4440A00775DD1A68F0D3125C7CB48D8A91DB2993542C5541137E817206705BB23A261EB3740D952B1AF92181F8A629E156B7A6D703D9225706A5BEE26845BD80552DF9A620F16B4C1444ED2514EC8C2AED453BEDB9805174ADA9610C91ACA500CCB221C109A56377BFC043FC0410340C0D4A509BE7D1252D65AF888905AD42BFD9CC0E84B63D82032DE9CB1CC1264FB6B65C2304818C566FDB36C47E43B3E43B405F7B8944340F78830901507D145B1818C86D9B003D03E5A33310CA66C44D63B2BDB427CC0DD68FD32176292359CE639C9177454E6A36D7CB808E13A9D309310B455202EC6BCF2891D2590755B92E4F0354E766B049D77B4B5CBD8B332A6D1261CC58A384EBB842D92273202EB7B45570CC42FB039C18B4A1308062D6710601C209F5B425D3A6B8735911FDB6BB26A556595C5E69D66A5FC346552526D8A8A292B3CDA869B28FAB0B2CB6162E583E8C9C558C4C8C457CB83E67C2F03960011091FDF5A35B88712D3AA5E0D0961242653850ACCA27BE2A8523B0557DC38A3FD90ACDDB190C813C3E86D50E2DAC874F2316C607A3582AACEF1C14DEE409551A9E02F60E9737C9940799B39932CD645341444414C77F4FA9046EE4020FB68D607B46759615803572502A296C291965B2C92320C663D504E06A0BCE3286A854C74A6256E168C0B750805359986493A25F75B5F8923BBBD4B2A30B6E9092CE0A5035939C47E900C4235A447796A426713E1BD269A13493D0F1A25721155A28143A355F99C582C2D258A270B9F78941AF004116E94F2F9825AF17C50B600705EA1A9C2440DF6803518A5BA558ACB5B732D06A3C80E555FA374D80D82F08C5B47CA12CBE6520340538C2100B5E094392ACACAFE1CE4AD74FA451C4379219140103E9C3BA7BA683CDDCA0D3B02D57104C292B2E25BC791D8B11D5079477D7B0F930176FB0A5CDA99AFBFB6FCA86226CB8152B250A536CA60B6CCF93880007068B41BBC5C6E9B8BD92AF8A717E37C69AC7DB7E76A2C36EB028C1E098915274B4D59DEF6C42D3C25BB35310846809C96BC43B639E52A3730654CC8DB548FAF21E446CA874A3CABA777BAC25B56902481C79A744D70D12130AD6BC8136349E3234C556267E97B0A8CCF772528299FA26111172C223F2484102917BDB6DE7770682698763E5B2038779F812363A727F40949B76B6913C8910D6F51DD48983BA149C070590582662FBC9053B667E1EEA1CA7173E421576F2D8AD7BF415899484BD1530B4FC855354952CF28D0F1216DFBA00EC100BDD76C4F4B405C913BAA78958AE31C578463877138CF89255A3935CFBD1B77DBB5F66B87543131DA4AABB6781427F417E841141DCB47FCD82A92AEB3C50030D71EB7F3B17B0207A6CDF654D563A420BB742AC30C0E01235910886FF045652D5035B7AB98A1B6ABAC88EA5996B965C2D3F3305E075BBCA267E8547C6C7769FB9F91E20849B524B7822965FE036A515C60E24636A3665B23B878C5B7658F7C49F2059255C89536426510875CBDCA111BDC29183459340C125DF30C05A7698490193D88C52410A14A7F12A118495413487B434568D105F2D7B9C0FC32E80A13E142528CA1825E0830CD41071AAC7124042145BE35E30D541C2BA31A82A5F479B3BAD881164AA347386C9BFA505C9968FDEA866120C8B4E809BDB1482D790A03FCB1CA88C15AAE8047E1678BA66833CA430D592638BF3BE19592027B3CCB044A9A4D01F3804C2FE0CA60CC7C017DC14DFF60562F20D912650FC24449A78998D2B0CE4D9B131955AFFE7B5C12278CB5B23847C8090FC0578F71760918E9EE8274673845CA29F8D338FA89637265C518F902A9BA8AD9615764CE9835B322E0B5BB1FE928888318988E435CC3C3A918CCC773371A9687884F0822558AE634A54D7C74556528F2D7CB212F1901A82AE68905330B4550518B7B44C117F335F9C818635A2A29E59B39784B021D88354D707CFE0B3599B54FA4A1218261DC72A00CF2CCEF8C6C2FE131899F9A239F545C4605296D7B39BEB0832732EB608464DF29D193B2F2C3B7C69CBBC2082CDA14863071235A75544320C1C7930262F82AC7BA788C6C09586C2420D7385A0A6C50D050910E2956844B558FA78B6CB2969E866A0BCC1B7B980A02669C226B6C9267F6E66995D6B37EEDC8E34F516EF48A69A3461F3742CC6268B26A8C158E4BF34C072D4E37A4E273EE3464AEA81B57C52AB4D5A1E94A668C9A14612196F6A792646581A8FF545179323AAA8369C21181C1329464099CDF940FA56CE1F204AD4B048D5E783E1948B3493B273B2A33D8C0183E386786C7E7E421B1536610CECB16B7A98641B95693879A7D8BC444931CEDAA6C45303AAC0A48AC29041085526FFFF11B531B1800F4E1FA75C4D008C4F9A112932C669D543551204405DA8B4704649A5D8034C6224AE18950BD7B979342C03C7499F7BAB9CDEA742DB9E086CD1D49A515250DBCEB9F6E3FCC1C7D5306918964B21DDB22207E03E57F0600DA8"

        assertEquals(knownEncapsulationKey, key.encapsulationKey.fullBytes.toHexString(HexFormat.UpperCase), "Encapsulation key is not correct!")
        assertEquals(knownDecapsulationKey, key.decapsulationKey.fullBytes.toHexString(HexFormat.UpperCase), "Decapsulation key is not correct!")
    }

    @Test
    fun katTest1024() {
        //Random Seed and PKESeed based from CCTV https://github.com/C2SP/CCTV/
        val randomSeed = KyberMath.decodeHex("5f574ef7f013d4336801fed022178c3ed91d0b6d51325315fc1dcabf4770a2ea")
        val pkeSeed = KyberMath.decodeHex("2a62c39ef4fc499f2d132716f480bb7521a49558ae84ee80d9352e66daf1e3a8")

        val key = KyberKeyGenerator.generate(KyberParameter.ML_KEM_1024, randomSeed, pkeSeed)

        val knownEncapsulationKey = "ED859032BBB74C7412A7271C8EF23A5A08C31551A2A5CB8ADA78538CE6C96D11625CB45E87B133163B16A4705ABA1514F006AFCCBCCF3C5C05ACBC4563771BB8508072745D0BA56F57566181C3073B6C2B0DDA50A2A83E74C67BCD48C0820B809D03A6AE4193DBD3BC06D072D2C64FD1E0B408A9C29818CD2DF7790F9779536B0A076B4FB57B56F8CBB8EA3290C2F8B381C993D9EB49D8B4873EC660895528AB9AC306A66AE8209E2DB9B79CB89220FAB9D5CBB290AC690C79199218229AA8276393A73C826459429BAED8365B88733871450E9523959C3F28691A3A0622E923259D2C90A61CA1525CAF75A3A4292036957A5966D55840927234E1C5445B6685396890E3CCB9869147E63CE0B23DEFBB1C00F46DF3819DD4A5756A355F61C1793B25A9B713C3ABD12605198083773CF26909FFC92CD423CD290BA1801C694E7C80D6E2C9C1B943C69A5E7387ADE187B21BD2A598C49EC772CDE74656F1B43FA21021BCB86DB8F91E03522BB4A76823483033F68659B57FA972C42673795B9A5DAFA229FD8818F940A1B38A925CF06AF712332B789A6F64CE91C7010AF8A531101DE8541A3BA4B4B893BFE7E791E693A5987A3D2D7224AEB213C5ABA14AA0686EFBBF31258D37122C304151916A9291181FFE788864F52ACF001D788A3D80E4AD14623E9C402090B73FAE5CB4225802CC4AB9C323C8CB914231C31C14C12A20AB7B5DF5B6815BC04D991A32B6CCD229CF9692BF2E549CEB66512BE58AFE284B1D4990E46B5BAFCCA72589024E0B710169445E793CBBDA9CA2664882199A54C31484D9364C2545876758999027C8F6423FA1A9EA810731092CA41C2451F29452C24D1D120517E06EAAC91A77A47DEC3C036FF84BFDA92BCB396A36A75007014C0B6882A939B7E2C109C6046C04E9C1E4B1BD83444CF7838CA909946B512CB8D06ED3AB66A62071EB439632CCCBCED23C06C3456CDABF321328A17263E6AA3FEE0028BEF312CC99477AC71C53909740502E340B7CC06111EEB90BB08C58BFB97D78ACBB10E7240EE5672062783636565C1744217787FFA33287F5075464B97707AEC6864B38C918E0EBAF40FC9AAC6128DB4863A40C80B9D23261344A370C7B2DCB76E38623E5443242BCCE9FB872B4C589B886AEB9FC79347CBF216B6EA8D1C7F5C5802FA24D1E68A4DC161699F90681069898E41D34A82CCED119189B6547587972C4B17851A292F728F638A90164B97416C5B5B9231F1C675CF12C8EC1CE4866673F61ADDF98950263680EFB56124B5936862F5328A3DE923C4B2435B543CEEE3B9761B5515AAAAECBDBB9CF8202090C82A2E5301FD0AEE4FA4B39B0302D1813AB87CC1BA15595C36EF953401A92B8A88465C29CA4062626BC45B2A762C4ED957E53551827322351701DB42C73E340566A476F559AC776283816DA810C76AF10F41482577544302E80EB6AB2FB720C2A950464C62970A450E65983C336DDE77039722C614143A2B72C40256CF2142365EBAF288B0D9D69B56671B45F72C90A26AD50229D8FD6291AE6306D614ABA34B65AF02FA7CC2F5D7C5C8F4B30DC715F65F82C6320088FE0CFD4F05DC63A22FFEB0F38F68C5E08AF5603C605007C9EFC1F1574C94D322191F248CF34246D9BB06C650E85A8CE1832860689AF7791054BD01B79A11CC41CA05F3A174D9393191BC541678989B0A6FBEA82C488AA828B077003A69B335098D00616E28D7853AB98B54C0B99840FF94393532285CCBC003120CD8B77C5C18D0E654750893DE5C071A60A152350CC537A34A60C7032C21623C1BD0CE38046B986E786051E9891A7784223B45CC09682DBFACD92776F594377D07290667A81726C7A62AB1E883329B22205B3E72165C846261429DD3CCCEDD4933BB38F4B9000A066C2464844AB47899269033078C1F2473E564A2C697CAEDED4CDA82B8516C287B23A84EE997FE9206874F73D130A73D5A14E10668365089A9695B7870806FA8431663120EAC9B9133937117CB3BCF862E306747139253F181DEB0352E6BB6B888561D46B3406FA31EC08520B275BACB6B1FD1BC40076958ED1BF96B70C5F567C9F83A3ABDCC85E81AA0F99A50C2AAC18A4177AA0BD1D7CAAABB11E09A3BC211685396750A4723C8C8334433019C1844C9AA22B6E6995BC703DDB09EDBE4F1A61A62A23531CF707976A861EFEF13E8347210D77F3D080E9BA89"
        val knownDecapsulationKey = "82B25C61F7099F870F988428AD662203F75C638390C593035B3AA1A91092B2D276FDDB56BCAB637E00A26EE68058376AD13C0E5D7B31ED29B2C24710B47B60246214BF308F8DD77379590842740C84AB6D8ADC71A1CB22C4E98E58112D803998A104BD606CB439E0B686384148A209F5D171E4B63E29F66863AACBA2C5A489600DFB64B65CE21F848B4C7621C6A3E65792497D1354A72E22405057CF9330332B419CA396CF69D374DF850A2481C943488AB45CB71C992E12034BAA94272A32CC694294AB6867D4F8758F972520EC5F90159FDA33AD91D893273AC9A3E35F2976BBFF525A2DE84CBC55ACBCA91FA9EA91700ABB87323D2A67C95D62CAD3DC534AA83FF3FB6837EA908F0B953CA88BFB01B62068A1ADE3C19E7B153F8B34B19295E054334F59B73855C030E597B688C3D2A14A336A2929393E0B27171315805E5CC3053B6D90843D82B933C1CC1574C18D9DDA933F3B33B8CB7BF7143F6F595B1EC7113FD46F629930F28C4D4F666CE24BCCD8BCA5D74488DE3B2480B176C0EB6F9DD19434EC33563303FCF7CDBE09C55D4216AD524379E451E74A2121C442C4412DE5E137ED18421E07779B598860CC2E4E42C10F58A01617936C4548453183739C5624C68915B79A25A90257B1437A1583A9107D7D0587BEE15570F3C008B9140F779CDCE06FBA05AC57991020162BB2096911594109F9032A09007EEA48E1B5B5E11C9643D75284256C5A73B935668ABB12AEEAB7B040F71E17A74235E166D1942F7CAA890869CCB1184CD44A9E82A89F31E83602E21DE2B5CACFC254282470E0C66B020A5B058043E9135AB06C4FE1329D7A280BA6DC3DE017C1041A26CF3B10D305C73594C469AC11B091BCB20412DFDC3EF0B712AEE31FC2A81BFBD9990CA296FE45BCB992BA92D4148591A2F80990F218A2991BB3F3098A36C6568DB8A40AB03B9E017305D893B48285A5178EE6B80DD2C5555837C3E976AFD36B895C10ACB438CA7009AD7723B31B3AA6A680156EC3CFE4E813DBF010E6E5B39A890B76984D20E965C5A39A6CDA801EC55C55245ABE3B946BDA7C8E70C99AC62E2CA2C2CE165722D710A1C443A6467F91C63ED53C3F223580FBD058B6C8B4F134AE3B490AE97466E1983B0E669B22615DF1732DF9E9A98D4575720571FFA60DC888A65F6644902A9AD89A93C4B22132515D808CA445BAB49E3276CAA8A48D272B823477A0BC151491C229AB38BD6A4485257374CBCD03D6A6C655B6A1D06751995FA1C394116476F399673B5B40857CB9C68721168A936D89A3008923B81C2D7EB94BA63C3EFF45B4CCB48A9D2142E8D5238CE904376BCD1E088B864A6A5ACAB75B138B9BE44B08F00825BC3A804835337CAC36BC41CA8BAB90384A51341875C7AD27D109AFA36E2965CAFE1922811762A077AF789B8D6C490C0F102B62869CA38A83EFFB05F14AC82346645DE63CB60BBA30B665A3F1C9F842952AEA89FE630F6404B63164A39692180D806D65DA3C1BE076AE77B42D665EDD2B93C1210427909D294A2FBAD460444032A727960210005B7B3AD367CC300738187B3C64BBC00B16257F09182537129B14BF94C482BFDB9B82634821862A7FB0234AE0B5685582DE054CB5575E9F8464336609CBD7AD5B486117AC4EA2468BE9147E8C96B3A07993D5725F85C31C79405541C2C13B3ABDC55B2DFA2AB02842A711A2B877097769C22BE065622AB0A92D5108BFA10C644935EE4652EFCA95FAFCA3B5CCCF0187A45708CF68838FFA79427A0400F8439F15B11E064B2B777C0715AA8A91C96EA7F1A851F47F8F077514A36C901059892273CA8695B3B418C8187558D18F1B9153D6C0B966E08F9A675889AA519224CDC4FC1FEE51082EC26CEA593124435F4BF95B3D852AD9554953088AAE602E0AD3023D17576123929B1150FA496B850AB4E5F372AB7188F3127D2DCB970DF56C4F5A2548903BD5EC50FB9196CF2374D7CC728243757743083D4A93C4B6ADCA54314A3200FE5A303ABA4C07D4CF3EB632ECA5B353190DECD984395192D1F63D3D9291E00AA17E0872DF27A405832D0A7B43115B05E6A4CB9293812AB26EB2E148E4B5082BA99039D6847A03BE1693AFC09A3AB95044107586E0DB02720145C84CC800B669C51C8A96E526C4A99970234409414ED623CCED859032BBB74C7412A7271C8EF23A5A08C31551A2A5CB8ADA78538CE6C96D11625CB45E87B133163B16A4705ABA1514F006AFCCBCCF3C5C05ACBC4563771BB8508072745D0BA56F57566181C3073B6C2B0DDA50A2A83E74C67BCD48C0820B809D03A6AE4193DBD3BC06D072D2C64FD1E0B408A9C29818CD2DF7790F9779536B0A076B4FB57B56F8CBB8EA3290C2F8B381C993D9EB49D8B4873EC660895528AB9AC306A66AE8209E2DB9B79CB89220FAB9D5CBB290AC690C79199218229AA8276393A73C826459429BAED8365B88733871450E9523959C3F28691A3A0622E923259D2C90A61CA1525CAF75A3A4292036957A5966D55840927234E1C5445B6685396890E3CCB9869147E63CE0B23DEFBB1C00F46DF3819DD4A5756A355F61C1793B25A9B713C3ABD12605198083773CF26909FFC92CD423CD290BA1801C694E7C80D6E2C9C1B943C69A5E7387ADE187B21BD2A598C49EC772CDE74656F1B43FA21021BCB86DB8F91E03522BB4A76823483033F68659B57FA972C42673795B9A5DAFA229FD8818F940A1B38A925CF06AF712332B789A6F64CE91C7010AF8A531101DE8541A3BA4B4B893BFE7E791E693A5987A3D2D7224AEB213C5ABA14AA0686EFBBF31258D37122C304151916A9291181FFE788864F52ACF001D788A3D80E4AD14623E9C402090B73FAE5CB4225802CC4AB9C323C8CB914231C31C14C12A20AB7B5DF5B6815BC04D991A32B6CCD229CF9692BF2E549CEB66512BE58AFE284B1D4990E46B5BAFCCA72589024E0B710169445E793CBBDA9CA2664882199A54C31484D9364C2545876758999027C8F6423FA1A9EA810731092CA41C2451F29452C24D1D120517E06EAAC91A77A47DEC3C036FF84BFDA92BCB396A36A75007014C0B6882A939B7E2C109C6046C04E9C1E4B1BD83444CF7838CA909946B512CB8D06ED3AB66A62071EB439632CCCBCED23C06C3456CDABF321328A17263E6AA3FEE0028BEF312CC99477AC71C53909740502E340B7CC06111EEB90BB08C58BFB97D78ACBB10E7240EE5672062783636565C1744217787FFA33287F5075464B97707AEC6864B38C918E0EBAF40FC9AAC6128DB4863A40C80B9D23261344A370C7B2DCB76E38623E5443242BCCE9FB872B4C589B886AEB9FC79347CBF216B6EA8D1C7F5C5802FA24D1E68A4DC161699F90681069898E41D34A82CCED119189B6547587972C4B17851A292F728F638A90164B97416C5B5B9231F1C675CF12C8EC1CE4866673F61ADDF98950263680EFB56124B5936862F5328A3DE923C4B2435B543CEEE3B9761B5515AAAAECBDBB9CF8202090C82A2E5301FD0AEE4FA4B39B0302D1813AB87CC1BA15595C36EF953401A92B8A88465C29CA4062626BC45B2A762C4ED957E53551827322351701DB42C73E340566A476F559AC776283816DA810C76AF10F41482577544302E80EB6AB2FB720C2A950464C62970A450E65983C336DDE77039722C614143A2B72C40256CF2142365EBAF288B0D9D69B56671B45F72C90A26AD50229D8FD6291AE6306D614ABA34B65AF02FA7CC2F5D7C5C8F4B30DC715F65F82C6320088FE0CFD4F05DC63A22FFEB0F38F68C5E08AF5603C605007C9EFC1F1574C94D322191F248CF34246D9BB06C650E85A8CE1832860689AF7791054BD01B79A11CC41CA05F3A174D9393191BC541678989B0A6FBEA82C488AA828B077003A69B335098D00616E28D7853AB98B54C0B99840FF94393532285CCBC003120CD8B77C5C18D0E654750893DE5C071A60A152350CC537A34A60C7032C21623C1BD0CE38046B986E786051E9891A7784223B45CC09682DBFACD92776F594377D07290667A81726C7A62AB1E883329B22205B3E72165C846261429DD3CCCEDD4933BB38F4B9000A066C2464844AB47899269033078C1F2473E564A2C697CAEDED4CDA82B8516C287B23A84EE997FE9206874F73D130A73D5A14E10668365089A9695B7870806FA8431663120EAC9B9133937117CB3BCF862E306747139253F181DEB0352E6BB6B888561D46B3406FA31EC08520B275BACB6B1FD1BC40076958ED1BF96B70C5F567C9F83A3ABDCC85E81AA0F99A50C2AAC18A4177AA0BD1D7CAAABB11E09A3BC211685396750A4723C8C8334433019C1844C9AA22B6E6995BC703DDB09EDBE4F1A61A62A23531CF707976A861EFEF13E8347210D77F3D080E9BA89FA12BD4F75CAA74F23B4AF606902F6187DD9BE62A43B1B529344F1114E69391D5F574EF7F013D4336801FED022178C3ED91D0B6D51325315FC1DCABF4770A2EA"

        assertEquals(knownEncapsulationKey, key.encapsulationKey.fullBytes.toHexString(HexFormat.UpperCase), "Encapsulation key is not correct!")
        assertEquals(knownDecapsulationKey, key.decapsulationKey.fullBytes.toHexString(HexFormat.UpperCase), "Decapsulation key is not correct!")
    }

    @Test
    fun bytesTest512() {
        val originalKeyPair = KyberKeyGenerator.generate(KyberParameter.ML_KEM_512)

        val bytesEncapsKey = originalKeyPair.encapsulationKey.fullBytes
        val bytesDecapsKey = originalKeyPair.decapsulationKey.fullBytes

        val recoveredKeyPair = KyberKEMKeyPair(KyberEncapsulationKey.fromBytes(bytesEncapsKey), KyberDecapsulationKey.fromBytes(bytesDecapsKey))

        assertContentEquals(originalKeyPair.encapsulationKey.key.fullBytes, recoveredKeyPair.encapsulationKey.key.fullBytes)
        assertContentEquals(originalKeyPair.decapsulationKey.fullBytes, recoveredKeyPair.decapsulationKey.fullBytes)

        val cipherText = originalKeyPair.encapsulationKey.encapsulate().cipherText

        val bytesCipherText = cipherText.fullBytes

        assertContentEquals(cipherText.fullBytes, KyberCipherText.fromBytes(bytesCipherText).fullBytes)
    }

    @Test
    fun bytesTest768() {
        val originalKeyPair = KyberKeyGenerator.generate(KyberParameter.ML_KEM_768)

        val bytesEncapsKey = originalKeyPair.encapsulationKey.fullBytes
        val bytesDecapsKey = originalKeyPair.decapsulationKey.fullBytes

        val recoveredKeyPair = KyberKEMKeyPair(KyberEncapsulationKey.fromBytes(bytesEncapsKey), KyberDecapsulationKey.fromBytes(bytesDecapsKey))

        assertContentEquals(originalKeyPair.encapsulationKey.key.fullBytes, recoveredKeyPair.encapsulationKey.key.fullBytes)
        assertContentEquals(originalKeyPair.decapsulationKey.fullBytes, recoveredKeyPair.decapsulationKey.fullBytes)

        val cipherText = originalKeyPair.encapsulationKey.encapsulate().cipherText

        val bytesCipherText = cipherText.fullBytes

        assertContentEquals(cipherText.fullBytes, KyberCipherText.fromBytes(bytesCipherText).fullBytes)
    }

    @Test
    fun bytesTest1024() {
        val originalKeyPair = KyberKeyGenerator.generate(KyberParameter.ML_KEM_1024)

        val bytesEncapsKey = originalKeyPair.encapsulationKey.fullBytes
        val bytesDecapsKey = originalKeyPair.decapsulationKey.fullBytes

        val recoveredKeyPair = KyberKEMKeyPair(KyberEncapsulationKey.fromBytes(bytesEncapsKey), KyberDecapsulationKey.fromBytes(bytesDecapsKey))

        assertContentEquals(originalKeyPair.encapsulationKey.key.fullBytes, recoveredKeyPair.encapsulationKey.key.fullBytes)
        assertContentEquals(originalKeyPair.decapsulationKey.fullBytes, recoveredKeyPair.decapsulationKey.fullBytes)

        val cipherText = originalKeyPair.encapsulationKey.encapsulate().cipherText

        val bytesCipherText = cipherText.fullBytes

        assertContentEquals(cipherText.fullBytes, KyberCipherText.fromBytes(bytesCipherText).fullBytes)
    }

    @Test
    fun pkeEncryptDecrypt512() {
        for(i in 1..10000) {
            val keyPairBob = KyberKeyGenerator.generate(KyberParameter.ML_KEM_512)

            val original = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }
            val cipher = KyberAgreement.encapsulate(keyPairBob.encapsulationKey, original).cipherText
            val recovered = KyberAgreement.fromCipherText(keyPairBob.decapsulationKey.key, cipher)

            assertContentEquals(original, recovered, "PKE Encryption and Decryption for 512 failed at attempt $i!")
        }
    }

    @Test
    fun pkeEncryptDecrypt768() {
        for(i in 1..10000) {
            val keyPairBob = KyberKeyGenerator.generate(KyberParameter.ML_KEM_768)

            val original = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }
            val cipher = KyberAgreement.encapsulate(keyPairBob.encapsulationKey, original).cipherText
            val recovered = KyberAgreement.fromCipherText(keyPairBob.decapsulationKey.key, cipher)

            assertContentEquals(original, recovered, "PKE Encryption and Decryption for 768 failed at attempt $i!")
        }
    }

    @Test
    fun pkeEncryptDecrypt1024() {
        for(i in 1..10000) {
            val keyPairBob = KyberKeyGenerator.generate(KyberParameter.ML_KEM_1024)

            val original = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }
            val cipher = KyberAgreement.encapsulate(keyPairBob.encapsulationKey, original).cipherText
            val recovered = KyberAgreement.fromCipherText(keyPairBob.decapsulationKey.key, cipher)

            assertContentEquals(original, recovered, "PKE Encryption and Decryption for 1024 failed at attempt $i!")
        }
    }

    @Test
    fun mlEncapsDecaps512() {
        for(i in 1..10000) {
            val keyPairAlice = KyberKeyGenerator.generate(KyberParameter.ML_KEM_512)

            val result = keyPairAlice.encapsulationKey.encapsulate()

            val bobSecretKey = result.sharedSecretKey
            val aliceSecretKey = result.cipherText.decapsulate(keyPairAlice.decapsulationKey)

            assertContentEquals(bobSecretKey, aliceSecretKey, "ML Encapsulation and Decapsulation for 512 failed at attempt $i!")
        }
    }

    @Test
    fun mlEncapsDecaps768() {
        for(i in 1..10000) {
            val keyPairAlice = KyberKeyGenerator.generate(KyberParameter.ML_KEM_768)

            val result = keyPairAlice.encapsulationKey.encapsulate()

            val bobSecretKey = result.sharedSecretKey
            val aliceSecretKey = result.cipherText.decapsulate(keyPairAlice.decapsulationKey)

            assertContentEquals(bobSecretKey, aliceSecretKey, "ML Encapsulation and Decapsulation for 512 failed at attempt $i!")
        }
    }

    @Test
    fun mlEncapsDecaps1024() {
        for(i in 1..10000) {
            val keyPairAlice = KyberKeyGenerator.generate(KyberParameter.ML_KEM_1024)

            val result = keyPairAlice.encapsulationKey.encapsulate()

            val bobSecretKey = result.sharedSecretKey
            val aliceSecretKey = result.cipherText.decapsulate(keyPairAlice.decapsulationKey)

            assertContentEquals(bobSecretKey, aliceSecretKey, "ML Encapsulation and Decapsulation for 512 failed at attempt $i!")
        }
    }

    @Test
    fun ntt() {
        val vectors = generateRandom256Shorts()
        val nttVectors = KyberMath.ntt(vectors)
        val recoveredVectors = KyberMath.nttInv(nttVectors)

        assertContentEquals(vectors, recoveredVectors, "Conversion to NTT and inversion failed!")
    }

    @Test
    fun ntt_comprehensive() {
        for(i in 0..KyberConstants.Q) {
            val vectors = IntArray(KyberConstants.N) { i % KyberConstants.Q }
            val nttVectors = KyberMath.ntt(vectors)
            val recoveredVectors = KyberMath.nttInv(nttVectors)

            assertContentEquals(vectors, recoveredVectors, "Comprehensive NTT conversion and inversion failed!")
        }
    }

    @Test
    fun byteEncoding() {
        val shorts = generateRandom256Shorts()
        val encodedBytes = KyberMath.byteEncode(shorts, 12)
        val decodedBytes = KyberMath.byteDecode(encodedBytes, 12)

        assertContentEquals(shorts, decodedBytes, "Byte Encoding and Decoding failed!")
    }

    @Test
    fun byteToBits() {
        val bytes = generateRandom32Bytes()
        val bits = KyberMath.bytesToBits(bytes)
        val recoveredBytes = KyberMath.bitsToBytes(bits)

        assertContentEquals(bytes, recoveredBytes, "Byte to Bits failed!")
    }

    @Test
    fun regenerationComparison512() {
        val randomSeed = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }
        val pkeSeed = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }

        val firstGeneration = KyberKeyGenerator.generate(KyberParameter.ML_KEM_512, randomSeed, pkeSeed.copyOf())
        val secondGeneration = KyberKeyGenerator.generate(KyberParameter.ML_KEM_512, randomSeed, pkeSeed.copyOf())

        assertContentEquals(firstGeneration.encapsulationKey.key.fullBytes, secondGeneration.encapsulationKey.key.fullBytes, "Regeneration failed for 512!")
    }

    @Test
    fun regenerationComparison768() {
        val randomSeed = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }
        val pkeSeed = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }

        val firstGeneration = KyberKeyGenerator.generate(KyberParameter.ML_KEM_768, randomSeed, pkeSeed.copyOf())
        val secondGeneration = KyberKeyGenerator.generate(KyberParameter.ML_KEM_768, randomSeed, pkeSeed.copyOf())

        assertContentEquals(firstGeneration.encapsulationKey.key.fullBytes, secondGeneration.encapsulationKey.key.fullBytes, "Regeneration failed for 768!")
    }

    @Test
    fun regenerationComparison1024() {
        val randomSeed = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }
        val pkeSeed = ByteArray(32).apply { CryptoRand.Default.nextBytes(this) }

        val firstGeneration = KyberKeyGenerator.generate(KyberParameter.ML_KEM_1024, randomSeed, pkeSeed.copyOf())
        val secondGeneration = KyberKeyGenerator.generate(KyberParameter.ML_KEM_1024, randomSeed, pkeSeed.copyOf())

        assertContentEquals(firstGeneration.encapsulationKey.key.fullBytes, secondGeneration.encapsulationKey.key.fullBytes, "Regeneration failed for 1024!")
    }

    @Test
    fun modulusIntegrityCheck() {
        for(i in 0..<KyberConstants.Q)
            assertTrue(KyberMath.isModuloOfQ(i), "Good Modulus Integrity check failed!")

        for(i in KyberConstants.Q..<(KyberConstants.Q * 2))
            assertTrue(!KyberMath.isModuloOfQ(i), "Evil Modulus Integrity check failed!")
    }

    fun generateRandom256Shorts(seed: Int = 24): IntArray {
        val shorts = IntArray(256)
        val rand = Random(seed)

        for(i in shorts.indices)
            shorts[i] = moduloOf(rand.nextInt(), KyberConstants.Q)

        return shorts
    }

    fun generateRandom32Bytes(seed: Int = 314): ByteArray {
        val bytes = ByteArray(32)
        val rand = Random(seed)

        for(i in bytes.indices)
            bytes[i] = rand.nextBytes(1)[0]

        return bytes
    }

    fun moduloOf(value: Number, modulo: Number): Int {
        val shortedValue = value.toInt()
        val shortedModulo = modulo.toInt()
        val isNegative = shortedValue < 0
        return ((shortedModulo - (abs(shortedValue) % shortedModulo)) * isNegative.int) + ((shortedValue % shortedModulo) * (!isNegative).int)
    }

    fun bytesToBitString(byteArray: ByteArray, bitCount: Int, joiner: String): String {
        var stringOutput = ""
        var count = 0
        for(byte in byteArray) {
            val bits = KyberMath.bytesToBits(byteArrayOf(byte))
            for(bit in bits) {
                stringOutput += bit.int

                count++

                if(count >= bitCount) {
                    stringOutput += joiner
                    count = 0
                }
            }
        }

        return stringOutput.removeSuffix(joiner).reversed()
    }

    fun bitsToString(booleanArray: BooleanArray, bitCount: Int, joiner: String): String {
        var stringOutput = ""
        var count = 0
        for(bit in booleanArray) {
            stringOutput += bit.int

            count++

            if(count >= bitCount) {
                stringOutput += joiner
                count = 0
            }
        }

        return stringOutput.removeSuffix(joiner).reversed()
    }
}